@startuml
/'
Copyright 2017-2018 Government of Canada - Public Services and Procurement Canada - buyandsell.gc.ca

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'/

skinparam ParticipantPadding 20
skinparam BaloxPadding 20

title Issuer Agent Boot Sequence

box "Indy" #LightBlue
    participant "Ledger" as ledger
endbox
actor "Trust Anchor\nAgent" as tag
actor "Holder/Prover\n(e.g., The Org Book)\nAgent" as obag
actor "Origin+Issuer\n(e.g., BC Registrar)\nAgent" as bcrag

=== BOOTSTRAP ==
note over ledger, bcrag
Issuer agent is also Origin agent
Trust anchor agent service wrapper API is up
endnote

bcrag -> ledger: Look up own nym
ledger --> bcrag: nym if present
alt Nym not present
    bcrag -[#blue]> tag: call send_nym(did, verkey, alias, role)
    tag -[#blue]> ledger: send Issuer nym
    ledger --[#blue]> tag: Issuer nym
    tag --[#blue]> bcrag: Issuer nym
end

loop each schema that issuer originates
    bcrag -> ledger: look up schema
    ledger --> bcrag: schema if present
    alt Schema not present
        bcrag -[#blue]> ledger: send schema
        ledger --[#blue]> bcrag: return schema
    end

    bcrag -> ledger: look up cred def
    ledger --> bcrag: cred def if present
    alt Cred def not present
        bcrag -[#blue]> ledger: send cred def
        ledger -[#blue]-> bcrag: return cred def
    end
end

@enduml
